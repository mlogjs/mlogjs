// The files generated by the setup command follow the following structure:
// ./mlogjs
// ├── lib/
// └── tsconfig.json
//
// The lib folder contains the type definitions for the compiler's environment.
// The tsconfig allows us to have a base configuration that can be updated
// without modifying the user's tsconfig.json.

import { join } from "node:path";

/**
 * Returns the contents of the tsconfig.json file that should be placed on the
 * project's root directory
 */
export function getRootTSConfig(): string {
  const config = {
    extends: "./.mlogjs/tsconfig.json",
    include: ["./.mlogjs/lib", "*.js", "*.ts", "src"],
    exclude: ["node_modules"],
  };
  return JSON.stringify(config, null, "\t");
}

/**
 * Returns the contents of the tsconfig.json file that should be placed inside
 * the .mlogjs folder
 */
export function getInnerTSConfig(): string {
  const config = {
    compilerOptions: {
      allowJs: true,
      checkJs: true,
      moduleDetection: "force",
      noEmit: true,
      noLib: true,
      target: "ESNext",
      paths: {
        "mlogjs:world": ["./lib/world.d.ts"],
      },
    },
  };
  return JSON.stringify(config, null, "\t");
}

/**
 * Returns the path to the lib folder of the compiler.
 *
 * To achieve this, this function assumes that the output bin.cjs file is one
 * folder bellow the package folder. If this condition is not met, then the
 * function will not return the correct path to the lib folder.
 */
export function getLibFolderPath(): string {
  const currentPath = __dirname.replace(/\\/g, "/");
  const parent = currentPath.split("/").slice(0, -1).join("/");
  return join(parent, "lib");
}
